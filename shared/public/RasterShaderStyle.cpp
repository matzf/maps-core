// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from shader.djinni

#include "RasterShaderStyle.h"  // my header

RasterShaderStyle const RasterShaderStyle::DEFAULT_STYLE = RasterShaderStyle(
    1.0f /* opacity */ ,
    0.0f /* brightnessMin */ ,
    1.0f /* brightnessMax */ ,
    0.0f /* contrast */ ,
    0.0f /* saturation */ ,
    1.0f /* gamma */ ,
    0.0f /* brightnessShift */ );

bool operator==(const RasterShaderStyle& lhs, const RasterShaderStyle& rhs) {
    return lhs.opacity == rhs.opacity &&
           lhs.brightnessMin == rhs.brightnessMin &&
           lhs.brightnessMax == rhs.brightnessMax &&
           lhs.contrast == rhs.contrast &&
           lhs.saturation == rhs.saturation &&
           lhs.gamma == rhs.gamma &&
           lhs.brightnessShift == rhs.brightnessShift;
}

bool operator!=(const RasterShaderStyle& lhs, const RasterShaderStyle& rhs) {
    return !(lhs == rhs);
}

bool operator<(const RasterShaderStyle& lhs, const RasterShaderStyle& rhs) {
    if (lhs.opacity < rhs.opacity) {
        return true;
    }
    if (rhs.opacity < lhs.opacity) {
        return false;
    }
    if (lhs.brightnessMin < rhs.brightnessMin) {
        return true;
    }
    if (rhs.brightnessMin < lhs.brightnessMin) {
        return false;
    }
    if (lhs.brightnessMax < rhs.brightnessMax) {
        return true;
    }
    if (rhs.brightnessMax < lhs.brightnessMax) {
        return false;
    }
    if (lhs.contrast < rhs.contrast) {
        return true;
    }
    if (rhs.contrast < lhs.contrast) {
        return false;
    }
    if (lhs.saturation < rhs.saturation) {
        return true;
    }
    if (rhs.saturation < lhs.saturation) {
        return false;
    }
    if (lhs.gamma < rhs.gamma) {
        return true;
    }
    if (rhs.gamma < lhs.gamma) {
        return false;
    }
    if (lhs.brightnessShift < rhs.brightnessShift) {
        return true;
    }
    if (rhs.brightnessShift < lhs.brightnessShift) {
        return false;
    }
    return false;
}

bool operator>(const RasterShaderStyle& lhs, const RasterShaderStyle& rhs) {
    return rhs < lhs;
}

bool operator<=(const RasterShaderStyle& lhs, const RasterShaderStyle& rhs) {
    return !(rhs < lhs);
}

bool operator>=(const RasterShaderStyle& lhs, const RasterShaderStyle& rhs) {
    return !(lhs < rhs);
}
