// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#include "NativeComputePassInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeComputeObjectInterface.h"

namespace djinni_generated {

NativeComputePassInterface::NativeComputePassInterface() : ::djinni::JniInterface<::ComputePassInterface, NativeComputePassInterface>("io/openmobilemaps/mapscore/shared/graphics/ComputePassInterface$CppProxy") {}

NativeComputePassInterface::~NativeComputePassInterface() = default;

NativeComputePassInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeComputePassInterface::JavaProxy::~JavaProxy() = default;

std::vector</*not-null*/ std::shared_ptr<::ComputeObjectInterface>> NativeComputePassInterface::JavaProxy::getComputeObjects() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeComputePassInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getComputeObjects);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::List<::djinni_generated::NativeComputeObjectInterface>::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_ComputePassInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::ComputePassInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_ComputePassInterface_00024CppProxy_native_1getComputeObjects(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::ComputePassInterface>(nativeRef);
        auto r = ref->getComputeObjects();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeComputeObjectInterface>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
