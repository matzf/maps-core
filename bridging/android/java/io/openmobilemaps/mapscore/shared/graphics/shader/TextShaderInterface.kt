// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from shader.djinni

package io.openmobilemaps.mapscore.shared.graphics.shader

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class TextShaderInterface {

    abstract fun setColor(color: io.openmobilemaps.mapscore.shared.graphics.common.Color)

    abstract fun setOpacity(opacity: Float)

    abstract fun setHaloColor(color: io.openmobilemaps.mapscore.shared.graphics.common.Color, width: Double)

    abstract fun asShaderProgramInterface(): ShaderProgramInterface

    public class CppProxy : TextShaderInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun setColor(color: io.openmobilemaps.mapscore.shared.graphics.common.Color) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setColor(this.nativeRef, color)
        }
        private external fun native_setColor(_nativeRef: Long, color: io.openmobilemaps.mapscore.shared.graphics.common.Color)

        override fun setOpacity(opacity: Float) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setOpacity(this.nativeRef, opacity)
        }
        private external fun native_setOpacity(_nativeRef: Long, opacity: Float)

        override fun setHaloColor(color: io.openmobilemaps.mapscore.shared.graphics.common.Color, width: Double) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setHaloColor(this.nativeRef, color, width)
        }
        private external fun native_setHaloColor(_nativeRef: Long, color: io.openmobilemaps.mapscore.shared.graphics.common.Color, width: Double)

        override fun asShaderProgramInterface(): ShaderProgramInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asShaderProgramInterface(this.nativeRef)
        }
        private external fun native_asShaderProgramInterface(_nativeRef: Long): ShaderProgramInterface
    }
}
