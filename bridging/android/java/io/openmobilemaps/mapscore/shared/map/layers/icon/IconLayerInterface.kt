// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from icon.djinni

package io.openmobilemaps.mapscore.shared.map.layers.icon

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class IconLayerInterface {

    companion object {
        @JvmStatic
        external fun create(): IconLayerInterface
    }

    abstract fun setIcons(icons: ArrayList<IconInfoInterface>)

    abstract fun getIcons(): ArrayList<IconInfoInterface>

    abstract fun remove(icon: IconInfoInterface)

    abstract fun removeList(icons: ArrayList<IconInfoInterface>)

    abstract fun removeIdentifier(identifier: String)

    abstract fun removeIdentifierList(identifiers: ArrayList<String>)

    abstract fun add(icon: IconInfoInterface)

    abstract fun addList(icons: ArrayList<IconInfoInterface>)

    abstract fun clear()

    abstract fun setCallbackHandler(handler: IconLayerCallbackInterface)

    abstract fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface

    abstract fun invalidate()

    abstract fun setLayerClickable(isLayerClickable: Boolean)

    public class CppProxy : IconLayerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun setIcons(icons: ArrayList<IconInfoInterface>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setIcons(this.nativeRef, icons)
        }
        private external fun native_setIcons(_nativeRef: Long, icons: ArrayList<IconInfoInterface>)

        override fun getIcons(): ArrayList<IconInfoInterface> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getIcons(this.nativeRef)
        }
        private external fun native_getIcons(_nativeRef: Long): ArrayList<IconInfoInterface>

        override fun remove(icon: IconInfoInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_remove(this.nativeRef, icon)
        }
        private external fun native_remove(_nativeRef: Long, icon: IconInfoInterface)

        override fun removeList(icons: ArrayList<IconInfoInterface>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeList(this.nativeRef, icons)
        }
        private external fun native_removeList(_nativeRef: Long, icons: ArrayList<IconInfoInterface>)

        override fun removeIdentifier(identifier: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeIdentifier(this.nativeRef, identifier)
        }
        private external fun native_removeIdentifier(_nativeRef: Long, identifier: String)

        override fun removeIdentifierList(identifiers: ArrayList<String>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeIdentifierList(this.nativeRef, identifiers)
        }
        private external fun native_removeIdentifierList(_nativeRef: Long, identifiers: ArrayList<String>)

        override fun add(icon: IconInfoInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_add(this.nativeRef, icon)
        }
        private external fun native_add(_nativeRef: Long, icon: IconInfoInterface)

        override fun addList(icons: ArrayList<IconInfoInterface>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addList(this.nativeRef, icons)
        }
        private external fun native_addList(_nativeRef: Long, icons: ArrayList<IconInfoInterface>)

        override fun clear() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_clear(this.nativeRef)
        }
        private external fun native_clear(_nativeRef: Long)

        override fun setCallbackHandler(handler: IconLayerCallbackInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCallbackHandler(this.nativeRef, handler)
        }
        private external fun native_setCallbackHandler(_nativeRef: Long, handler: IconLayerCallbackInterface)

        override fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asLayerInterface(this.nativeRef)
        }
        private external fun native_asLayerInterface(_nativeRef: Long): io.openmobilemaps.mapscore.shared.map.LayerInterface

        override fun invalidate() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_invalidate(this.nativeRef)
        }
        private external fun native_invalidate(_nativeRef: Long)

        override fun setLayerClickable(isLayerClickable: Boolean) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setLayerClickable(this.nativeRef, isLayerClickable)
        }
        private external fun native_setLayerClickable(_nativeRef: Long, isLayerClickable: Boolean)
    }
}
