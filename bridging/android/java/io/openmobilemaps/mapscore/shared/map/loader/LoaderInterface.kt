// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from loader.djinni

package io.openmobilemaps.mapscore.shared.map.loader

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class LoaderInterface {

    abstract fun loadTexture(url: String, etag: String?): TextureLoaderResult

    abstract fun loadData(url: String, etag: String?): DataLoaderResult

    abstract fun loadTextureAsnyc(url: String, etag: String?): com.snapchat.djinni.Future<TextureLoaderResult>

    abstract fun loadDataAsync(url: String, etag: String?): com.snapchat.djinni.Future<DataLoaderResult>

    abstract fun cancel(url: String)

    public class CppProxy : LoaderInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun loadTexture(url: String, etag: String?): TextureLoaderResult {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadTexture(this.nativeRef, url, etag)
        }
        private external fun native_loadTexture(_nativeRef: Long, url: String, etag: String?): TextureLoaderResult

        override fun loadData(url: String, etag: String?): DataLoaderResult {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadData(this.nativeRef, url, etag)
        }
        private external fun native_loadData(_nativeRef: Long, url: String, etag: String?): DataLoaderResult

        override fun loadTextureAsnyc(url: String, etag: String?): com.snapchat.djinni.Future<TextureLoaderResult> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadTextureAsnyc(this.nativeRef, url, etag)
        }
        private external fun native_loadTextureAsnyc(_nativeRef: Long, url: String, etag: String?): com.snapchat.djinni.Future<TextureLoaderResult>

        override fun loadDataAsync(url: String, etag: String?): com.snapchat.djinni.Future<DataLoaderResult> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadDataAsync(this.nativeRef, url, etag)
        }
        private external fun native_loadDataAsync(_nativeRef: Long, url: String, etag: String?): com.snapchat.djinni.Future<DataLoaderResult>

        override fun cancel(url: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_cancel(this.nativeRef, url)
        }
        private external fun native_cancel(_nativeRef: Long, url: String)
    }
}
