// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from touch_handler.djinni

package io.openmobilemaps.mapscore.shared.map.controls

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class TouchHandlerInterface {

    abstract fun onTouchEvent(touchEvent: TouchEvent)

    abstract fun insertListener(listener: TouchInterface, index: Int)

    abstract fun addListener(listener: TouchInterface)

    abstract fun removeListener(listener: TouchInterface)

    public class CppProxy : TouchHandlerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun onTouchEvent(touchEvent: TouchEvent) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_onTouchEvent(this.nativeRef, touchEvent)
        }
        private external fun native_onTouchEvent(_nativeRef: Long, touchEvent: TouchEvent)

        override fun insertListener(listener: TouchInterface, index: Int) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_insertListener(this.nativeRef, listener, index)
        }
        private external fun native_insertListener(_nativeRef: Long, listener: TouchInterface, index: Int)

        override fun addListener(listener: TouchInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addListener(this.nativeRef, listener)
        }
        private external fun native_addListener(_nativeRef: Long, listener: TouchInterface)

        override fun removeListener(listener: TouchInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeListener(this.nativeRef, listener)
        }
        private external fun native_removeListener(_nativeRef: Long, listener: TouchInterface)
    }
}
