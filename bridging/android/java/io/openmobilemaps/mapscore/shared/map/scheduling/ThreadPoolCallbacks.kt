// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from task_scheduler.djinni

package io.openmobilemaps.mapscore.shared.map.scheduling

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class ThreadPoolCallbacks {

    abstract fun getCurrentThreadName(): String

    abstract fun setCurrentThreadName(name: String)

    abstract fun setThreadPriority(priority: TaskPriority)

    abstract fun attachThread()

    abstract fun detachThread()

    public class CppProxy : ThreadPoolCallbacks {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun getCurrentThreadName(): String {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCurrentThreadName(this.nativeRef)
        }
        private external fun native_getCurrentThreadName(_nativeRef: Long): String

        override fun setCurrentThreadName(name: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCurrentThreadName(this.nativeRef, name)
        }
        private external fun native_setCurrentThreadName(_nativeRef: Long, name: String)

        override fun setThreadPriority(priority: TaskPriority) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setThreadPriority(this.nativeRef, priority)
        }
        private external fun native_setThreadPriority(_nativeRef: Long, priority: TaskPriority)

        override fun attachThread() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_attachThread(this.nativeRef)
        }
        private external fun native_attachThread(_nativeRef: Long)

        override fun detachThread() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_detachThread(this.nativeRef)
        }
        private external fun native_detachThread(_nativeRef: Long)
    }
}
